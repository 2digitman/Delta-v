using Content.Shared.Disease;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using System.Collections.Generic;
using Content.Shared.Research.Prototypes;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.Utility;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Prototypes;

namespace Content.Client.Disease.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class VaccineMachineMenu : DefaultWindow
    {
        public VaccineMachineBoundUserInterface Owner { get; }

        private readonly List<DiseasePrototype> _knownDiseasePrototypes = new();

        public DiseasePrototype? DiseaseSelected;

        public VaccineMachineMenu(VaccineMachineBoundUserInterface owner)
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            Owner = owner;

            KnownDiseases.OnItemSelected += KnownDiseaseSelected;
            CreateButton.OnPressed += _ =>
            {
                CreateVaccine();
            };

            Populate();
        }

        /// <summary>
        ///     Called when a known disease is selected.
        /// </summary>
        private void KnownDiseaseSelected(ItemList.ItemListSelectedEventArgs obj)
        {
            DiseaseSelected = _knownDiseasePrototypes[obj.ItemIndex];
            CreateButton.Disabled = false;

            PopulateSelectedDisease();
        }

        /// <summary>
        ///     Sends a message to create a vaccine from the selected technology.
        /// </summary>
        private void CreateVaccine()
        {
            if (DiseaseSelected == null)
                return;

            Owner.CreateVaccineMessage(DiseaseSelected);
        }

        /// <summary>
        ///     Updates the whole user interface.
        /// </summary>
        public void Populate()
        {
            PopulateDiseases();
        }

        public void PopulateDiseases()
        {
            KnownDiseases.Clear();

            _knownDiseasePrototypes.Clear();

            var prototypeMan = IoCManager.Resolve<IPrototypeManager>();

            foreach (var disease in prototypeMan.EnumeratePrototypes<DiseasePrototype>())
            {
                if (!disease.Infectious)
                    continue;

                KnownDiseases.AddItem(disease.Name);
                _knownDiseasePrototypes.Add(disease);
            }
        }

        public void PopulateSelectedDisease()
        {
            if (DiseaseSelected == null)
            {
                DiseaseName.Text = Loc.GetString("vaccine-machine-menu-none-selected");
                DiseaseResistance.Text = Loc.GetString("vaccine-machine-menu-spaceacillin-resist-none");
                return;
            }

            DiseaseName.Text = DiseaseSelected.Name;
            DiseaseResistance.Text = Loc.GetString("vaccine-machine-menu-spaceacillin-resist", ("value", DiseaseSelected.CureResist.ToString()));
        }
    }
}
